# this file can be used to test a single repo build and avoid 
# having to build all prevous repos in the flow
# this requires to update the test-data.json with the repo that 
# needs to be tested and valid run ids of any dependancies


name: test-workflow
         
on:  
  push:
    branches: [ 'github-workflow' ] 
  workflow_run:
    workflows: "Create Artifacts and pass runid"   
    branches: [ 'github-workflow' ]    
    types:   
      - completed       
  workflow_dispatch: 
env: 
  RUN_ID: ${{ github.run_id }} 
 
jobs:
       
  build-testing:
     strategy:
      matrix:
          #os: [  'ol8', 'el9', 'd10', 'u18', 'u20'  ]
          os: [ 'u20'   ]
     runs-on: ubuntu-latest

     steps:
       # - name: Check out Repo
        #  uses: actions/checkout@v4
        #  with:
        #   ref: github-workflow


        - name: Fetch build_vars.json from projects
          env:
             github-token: ${{ secrets.GIT_ACTIONS }}
          run: |
            git clone https://github.com/cs1867/project.git project
            ls -al project
            cp project/toolbox/workflows/repo_test.json .
            cp project/toolbox/workflows/github-workflow-addrepo.sh . 
            ls -al 
 
        - name: Set build_vars.json as workflow variable
          id: set_build_vars
          run: |
           BUILD_VARS_JSON=$(jq -c . repo_test.json )
           echo "BUILD_VARS_JSON=${BUILD_VARS_JSON}" >> $GITHUB_ENV
           echo "BUILD_VARS_JSON=${BUILD_VARS_JSON}"
        
        - name:  cat repo_test.json
          run: |
            cat repo_test.json 
            
        - name: Extract dependencies
          id: extract_deps
          run: |
            echo "$BUILD_VARS_JSON" | jq -r '.repos[] | select(.name == "${{ github.event.repository.name }}") | .deps[]' > deps.txt
            case  "${{ github.event.inputs.OS }}" in
            'u20'|'u24')
                 echo "remove minor packages"
                 sed -i '/minor-packages/d' deps.txt
            ;;
            *)
                echo "No specific packages to remove "
            ;;
            esac
            echo "Dependencies for this build:"
            cat deps.txt
            
        - name: Download artifacts
          run: |
            mkdir -p artifacts
            while IFS= read -r repo; do
              echo "Downloading artifact for $repo"
              run_id=$(echo "$BUILD_VARS_JSON" | jq -r ".buildids | .[\"$repo\"]")
              echo "rund id $run_id"
              gh run download $run_id --repo cs1867/$repo -D artifacts/$repo --name "$repo-${{ github.event.inputs.OS }}"  
              artifact_path="artifacts/$repo"
              pwd
              echo "list artifact path"
              ls -al "$artifact_path"
              if [ "${{ github.event.inputs.OS }}" == 'ol8' ] || [ "${{ github.event.inputs.OS }}" == 'el9' ]; then
                mkdir -p artifacts/RPMS
                echo "copy to the artifacts RPM dir"
                cp "$artifact_path"/RPMS/*.rpm artifacts/RPMS
              elif [ "${{ github.event.inputs.OS }}" == 'd11' ] || [ "${{ github.event.inputs.OS }}" == 'd12' ]; then
                echo "debian or ubuntu" 
                mkdir -p artifacts/DEBS
                echo "copy to the artifacts DEBS dir"
                cp -r "$artifact_path"/* artifacts/DEBS
                echo "list artifacts DEBS dir"
                ls -al artifacts/DEBS/*
               elif [ "${{ github.event.inputs.OS }}" == 'u20' ] || [ "${{ github.event.inputs.OS }}" == 'u24' ]; then
                echo " ubuntu artifacts " 
                mkdir -p artifacts/DEBS
                echo "copy to the artifacts DEBS dir"
                cp -r "$artifact_path"/* artifacts/DEBS
                echo "list artifacts DEBS dir"
                ls -al artifacts/DEBS/*
              fi
            done < deps.txt
          env:
            GITHUB_TOKEN: ${{ secrets.GIT_ACTIONS }}

           
      
