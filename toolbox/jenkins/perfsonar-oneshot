#!/bin/sh -e
#
# Script for Jenkins job 'perfsonar-oneshot'
#

die()
{
    echo "$@" 1>&2
    exit 1
}

# TODO: Assert presence of $OS, $PROJECT, $BUILD_REQUIRES_REPO, $TAG, $SKIP_INSTALL, OTHERS?

case "${OS}" in
    d10)
        OS_TYPE="debian"
        OS_VERSION="10"
        PKG_INSTALLER="apt"
        ;;
    u20)
        OS_TYPE="ubuntu"
        OS_VERSION="20"
        PKG_INSTALLER="apt"
        ;;
    el7)
        OS_TYPE="redhat"
        OS_VERSION="7"
        PKG_INSTALLER="yum"
        #TODO: Change back after 5.0.3 tag
        #NMINOR_BUILD_REPO_PATH="staging/el/${OS_VERSION}/x86_64/perfsonar/latest/packages/perfsonar-repo-nightly-minor-0.11-1.noarch.rpm"
        NMINOR_BUILD_REPO_PATH="/nightly/el/7/x86_64/perfsonar/5/packages/perfsonar-repo-nightly-minor-0.11-0.20230615195512.el7.noarch.rpm"
        NPATCH_BUILD_REPO_PATH="staging/el/${OS_VERSION}/x86_64/perfsonar/latest/packages/perfsonar-repo-nightly-patch-0.11-1.noarch.rpm"
        STAGING_BUILD_REPO_PATH="staging/el/${OS_VERSION}/x86_64/perfsonar/latest/packages/perfsonar-repo-staging-0.11-1.noarch.rpm"
        ;;
    el8)
        OS_TYPE="redhat"
        OS_VERSION="8"
        PKG_INSTALLER="dnf"
        NMINOR_BUILD_REPO_PATH="nightly/el/${OS_VERSION}/x86_64/perfsonar/minor/packages/perfsonar-repo-nightly-minor-0.11-0.20230614155903.el${OS_VERSION}.noarch.rpm"
        NPATCH_BUILD_REPO_PATH="nightly/el/${OS_VERSION}/x86_64/perfsonar/patch/packages/perfsonar-repo-nightly-patch-0.11-0.20230614155903.el${OS_VERSION}.noarch.rpm"
        STAGING_BUILD_REPO_PATH="staging/el/${OS_VERSION}/x86_64/perfsonar/latest/packages/perfsonar-repo-staging-0.11-0.20230614155903.el${OS_VERSION}.noarch.rpm"
        ;;
    el9)
        OS_TYPE="redhat"
        OS_VERSION="9"
        PKG_INSTALLER="dnf"
        NMINOR_BUILD_REPO_PATH="nightly/el/${OS_VERSION}/x86_64/perfsonar/minor/packages/perfsonar-repo-nightly-minor-0.11-0.20230614154649.el${OS_VERSION}.noarch.rpm"
        NPATCH_BUILD_REPO_PATH="nightly/el/${OS_VERSION}/x86_64/perfsonar/patch/packages/perfsonar-repo-nightly-patch-0.11-0.20230614154649.el${OS_VERSION}.noarch.rpm"
        STAGING_BUILD_REPO_PATH="staging/el/${OS_VERSION}/x86_64/perfsonar/latest/packages/perfsonar-repo-staging-0.11-0.20230614154649.el${OS_VERSION}.noarch.rpm"
        ;;
    *)
        die "OS '${OS}' is not supported."
        ;;
esac

# HACK: We need a better way to get these paths when we are building an
# OS that does not have perfsonar-repo packages in production
# environment.

# Figure out the path to get dependent packages if needed

if [ "${OS_TYPE}" == "redhat" ] && [ "${BUILD_REQUIRES_REPO}" == "nightly-minor" ]; then
    BUILD_REPO_PATH="${NMINOR_BUILD_REPO_PATH}"
elif [ "${OS_TYPE}" == "redhat" ] && [ "${BUILD_REQUIRES_REPO}" == "nightly-patch" ]; then
    BUILD_REPO_PATH="${NPATCH_BUILD_REPO_PATH}"
elif [ "${OS_TYPE}" == "redhat" ] && [ "${BUILD_REQUIRES_REPO}" == "staging" ]; then
    BUILD_REPO_PATH="${STAGING_BUILD_REPO_PATH}"
fi


# Check if tag. If it is then set release to true so packages generated don't have timestamp

UNIBUILD_OPTS=""
if [ -n "${TAG}" ]; then
    UNIBUILD_OPTS="--release"
fi


# Build script to be run by one-shot builder and dump it out for
# diagnostic purposes.

TEMP_SCRIPT="$(mktemp)"
cleanup()
{
    rm -rf "${TEMP_SCRIPT}"
}
trap cleanup EXIT

echo 'set -e' >> "${TEMP_SCRIPT}"

# Set up the repository where the build will pull dependencies

if [ -n "${BUILD_REQUIRES_REPO}" ] && [ "${BUILD_REQUIRES_REPO}" != "none" ]; then
    if [ "${OS_TYPE}" == "redhat" ] &&  [ "${BUILD_REQUIRES_REPO}" == "prod" ]; then
        echo "sudo ${PKG_INSTALLER} install -y 'http://linux.mirrors.es.net/perfsonar/el${OS_VERSION}/x86_64/5/packages/perfsonar-repo-0.11-1.noarch.rpm'" >> "${TEMP_SCRIPT}"
    elif [ "${OS_TYPE}" == "redhat" ]; then
        echo "sudo ${PKG_INSTALLER} install -y 'https://perfsonar-dev3.grnoc.iu.edu/${BUILD_REPO_PATH}'" >> "${TEMP_SCRIPT}"
        # TODO: Why is this here?
        #/perfsonar-repo-${BUILD_REQUIRES_REPO}-0.11-1.noarch.rpm
  fi
fi

if [ "${SKIP_INSTALL}" = true ]; then
        echo "unibuild ${UNIBUILD_OPTS} make" >> "${TEMP_SCRIPT}"
    echo "mkdir ./unibuild-repo" >> "${TEMP_SCRIPT}"
        echo "unibuild gather ./unibuild-repo" >> "${TEMP_SCRIPT}"
else
        echo "unibuild ${UNIBUILD_OPTS} build" >> "${TEMP_SCRIPT}"
fi

echo Install script:
cat "${TEMP_SCRIPT}"


# Do the build

curl -s https://raw.githubusercontent.com/perfsonar/docker-oneshot-builder/main/build \
    | sh -s - --run "${TEMP_SCRIPT}" . "${OS}"
